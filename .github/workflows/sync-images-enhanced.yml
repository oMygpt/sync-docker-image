name: Enhanced Docker Image Sync

on:
  push:
    paths:
      - 'upload/images.md'
      - 'upload/batch_sync.json'
  workflow_dispatch:
    inputs:
      images:
        description: '镜像列表 (每行一个，或JSON格式)'
        required: false
        type: string
      dry_run:
        description: '干运行模式'
        required: false
        type: boolean
        default: false
      max_parallel:
        description: '最大并发数'
        required: false
        type: number
        default: 3
      force_sync:
        description: '强制同步（忽略已处理标记）'
        required: false
        type: boolean
        default: false

env:
  MAX_RETRIES: 3
  RETRY_DELAY: 10
  LOG_LEVEL: INFO
  CLEANUP_ON_SUCCESS: true

jobs:
  # 预检查作业
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      images-count: ${{ steps.parse.outputs.images-count }}
      config-valid: ${{ steps.validate.outputs.config-valid }}
      images-matrix: ${{ steps.parse.outputs.images-matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate configuration
        id: validate
        run: |
          echo "🔍 验证配置..."
          
          # 检查必需的secrets（阿里云相关）
          required_secrets=(
            "ALIYUN_REGION"
            "ALIYUN_ACCESS_KEY_ID"
            "ALIYUN_ACCESS_KEY_SECRET"
            "ALIYUN_REGISTRY"
            "ALIYUN_USERNAME"
            "ALIYUN_PASSWORD"
            "ALIYUN_NAMESPACE"
          )
          
          # 可选的secrets（DockerHub相关）
          optional_secrets=(
            "DOCKERHUB_USERNAME"
            "DOCKERHUB_TOKEN"
          )
          
          missing_secrets=()
          for secret in "${required_secrets[@]}"; do
            if [[ -z "${!secret:-}" ]]; then
              missing_secrets+=("$secret")
            fi
          done
          
          if [[ ${#missing_secrets[@]} -gt 0 ]]; then
            echo "❌ 缺少必需的secrets: ${missing_secrets[*]}"
            echo "config-valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # 检查可选的DockerHub凭证
          dockerhub_configured=false
          if [[ -n "${{ secrets.DOCKERHUB_USERNAME }}" && -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            dockerhub_configured=true
            echo "✅ DockerHub凭证已配置"
          else
            echo "⚠️ DockerHub凭证未配置，将以匿名方式拉取公开镜像"
          fi
          
          echo "✅ 配置验证通过"
          echo "config-valid=true" >> $GITHUB_OUTPUT
        env:
          ALIYUN_REGION: ${{ secrets.ALIYUN_REGION }}
          ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
          ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
          ALIYUN_USERNAME: ${{ secrets.ALIYUN_USERNAME }}
          ALIYUN_PASSWORD: ${{ secrets.ALIYUN_PASSWORD }}
          ALIYUN_NAMESPACE: ${{ secrets.ALIYUN_NAMESPACE }}

      - name: Parse image list
        id: parse
        run: |
          echo "📋 解析镜像列表..."
          
          images_file="upload/images.md"
          batch_file="upload/batch_sync.json"
          images_array=()
          
          # 处理手动输入的镜像
          if [[ -n "${{ github.event.inputs.images }}" ]]; then
            echo "处理手动输入的镜像列表"
            while IFS= read -r line; do
              line=$(echo "$line" | xargs)  # 去除前后空格
              [[ -n "$line" && "${line:0:1}" != "#" ]] && images_array+=("$line")
            done <<< "${{ github.event.inputs.images }}"
          fi
          
          # 处理批量同步JSON文件
          if [[ -f "$batch_file" ]]; then
            echo "处理批量同步JSON文件"
            while IFS= read -r image; do
              [[ -n "$image" ]] && images_array+=("$image")
            done < <(jq -r '.images[]?' "$batch_file" 2>/dev/null || true)
          fi
          
          # 处理标准镜像列表文件
          if [[ -f "$images_file" ]]; then
            echo "处理标准镜像列表文件"
            while IFS= read -r line || [[ -n "$line" ]]; do
              line=$(echo "$line" | tr -d '\r' | xargs)
              [[ -n "$line" && "${line:0:1}" != "#" ]] && images_array+=("$line")
            done < "$images_file"
          fi
          
          # 去重并验证
          declare -A unique_images
          valid_images=()
          
          for image in "${images_array[@]}"; do
            # 基本格式验证
            if [[ "$image" =~ ^[a-zA-Z0-9._-]+(/[a-zA-Z0-9._-]+)*(:([a-zA-Z0-9._-]+))?$ ]]; then
              # 添加默认标签
              if [[ ! "$image" =~ ":" ]]; then
                image="${image}:latest"
              fi
              
              # 去重
              if [[ -z "${unique_images[$image]:-}" ]]; then
                unique_images["$image"]=1
                valid_images+=("$image")
              fi
            else
              echo "⚠️ 跳过无效镜像格式: $image"
            fi
          done
          
          images_count=${#valid_images[@]}
          echo "📊 找到 $images_count 个有效镜像"
          
          if [[ $images_count -eq 0 ]]; then
            echo "❌ 没有找到有效的镜像进行同步"
            exit 1
          fi
          
          # 创建矩阵
          matrix_json=$(printf '%s\n' "${valid_images[@]}" | jq -R . | jq -s .)
          
          echo "images-count=$images_count" >> $GITHUB_OUTPUT
          echo "images-matrix=$matrix_json" >> $GITHUB_OUTPUT
          
          # 显示将要处理的镜像
          echo "📋 将要同步的镜像:"
          printf '  - %s\n' "${valid_images[@]}"

  # 主同步作业
  sync-images:
    needs: pre-check
    if: needs.pre-check.outputs.config-valid == 'true' && needs.pre-check.outputs.images-count > 0
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: ${{ fromJson(github.event.inputs.max_parallel || '3') }}
      matrix:
        image: ${{ fromJson(needs.pre-check.outputs.images-matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Install dependencies
        run: |
          echo "🔧 安装依赖工具..."
          
          # 安装阿里云CLI
          curl -sSL https://github.com/aliyun/aliyun-cli/releases/download/v3.0.188/aliyun-cli-linux-3.0.188-amd64.tgz | tar -xz
          sudo mv aliyun /usr/local/bin/
          aliyun --version
          
          # 安装jq（用于JSON处理）
          sudo apt-get update && sudo apt-get install -y jq
          
          # 创建必要的目录
          mkdir -p temp done logs

      - name: Configure authentication
        run: |
          echo "🔐 配置认证信息..."
          
          # 配置Docker凭证存储
          mkdir -p ~/.docker
          cat > ~/.docker/config.json << EOF
          {
            "auths": {},
            "credsStore": "secretservice"
          }
          EOF
          
          # 配置阿里云CLI
          aliyun configure set \
            --mode AK \
            --region ${{ secrets.ALIYUN_REGION }} \
            --access-key-id ${{ secrets.ALIYUN_ACCESS_KEY_ID }} \
            --access-key-secret ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
          
          # 登录Docker Hub（仅在需要时）
          if [[ -n "${{ secrets.DOCKERHUB_USERNAME }}" && -n "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            echo "登录Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # 验证Docker Hub登录
            if docker info | grep -q "Username: ${{ secrets.DOCKERHUB_USERNAME }}"; then
              echo "✅ Docker Hub认证成功"
            else
              echo "⚠️ Docker Hub认证可能失败，但继续执行（公开镜像不需要认证）"
            fi
          else
            echo "⚠️ 未配置Docker Hub凭证，将以匿名方式拉取公开镜像"
          fi
          
          # 登录阿里云容器服务
          echo "登录阿里云容器镜像服务..."
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login "${{ secrets.ALIYUN_REGISTRY }}" -u "${{ secrets.ALIYUN_USERNAME }}" --password-stdin
          
          if docker info | grep -q "${{ secrets.ALIYUN_REGISTRY }}"; then
            echo "✅ 阿里云认证成功"
          else
            echo "❌ 阿里云认证失败"
            exit 1
          fi
          
          echo "✅ 认证配置完成"

      - name: Process single image
        id: sync
        run: |
          set -euo pipefail
          
          # 设置变量
          SOURCE_IMAGE="${{ matrix.image }}"
          NAMESPACE="${{ secrets.ALIYUN_NAMESPACE }}"
          REGISTRY="${{ secrets.ALIYUN_REGISTRY }}"
          DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"
          FORCE_SYNC="${{ github.event.inputs.force_sync || 'false' }}"
          
          # 日志文件
          LOG_FILE="logs/sync_${SOURCE_IMAGE//[\/:]/_}_$(date +%Y%m%d_%H%M%S).log"
          
          # 日志函数
          log() {
            local level="$1"
            local message="$2"
            local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
            echo "[$level] $timestamp - $message" | tee -a "$LOG_FILE"
          }
          
          # 进度报告函数
          report_progress() {
            local step="$1"
            local status="$2"
            local message="$3"
            echo "::group::📊 [$step] $status"
            echo "$message"
            echo "::endgroup::"
          }
          
          log "INFO" "开始处理镜像: $SOURCE_IMAGE"
          report_progress "开始" "🚀" "开始同步镜像 $SOURCE_IMAGE"
          
          # 解析镜像信息
          image_name=$(echo "$SOURCE_IMAGE" | cut -d':' -f1)
          image_tag=$(echo "$SOURCE_IMAGE" | grep ':' > /dev/null && echo "$SOURCE_IMAGE" | cut -d':' -f2 || echo "latest")
          repo_name=$(echo "$image_name" | rev | cut -d'/' -f1 | rev)
          
          # 构造目标镜像路径
          TARGET_IMAGE="${REGISTRY}/${NAMESPACE}/${repo_name}:${image_tag}"
          
          log "INFO" "源镜像: $SOURCE_IMAGE"
          log "INFO" "目标镜像: $TARGET_IMAGE"
          
          # 检查是否已处理（除非强制同步）
          done_marker="done/${SOURCE_IMAGE//[\/:]/_}.txt"
          if [[ "$FORCE_SYNC" != "true" && -f "$done_marker" ]]; then
            log "INFO" "镜像已处理，跳过: $SOURCE_IMAGE"
            report_progress "跳过" "⏭️" "镜像 $SOURCE_IMAGE 已处理，跳过同步"
            echo "status=skipped" >> $GITHUB_OUTPUT
            echo "message=镜像已处理" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 干运行模式
          if [[ "$DRY_RUN" == "true" ]]; then
            log "INFO" "[DRY RUN] 模拟同步: $SOURCE_IMAGE -> $TARGET_IMAGE"
            report_progress "干运行" "🧪" "模拟同步 $SOURCE_IMAGE -> $TARGET_IMAGE"
            echo "status=dry-run" >> $GITHUB_OUTPUT
            echo "message=干运行模式" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 确保阿里云仓库存在
          ensure_aliyun_repo() {
            local repo="$1"
            log "INFO" "检查/创建阿里云仓库: $repo"
            
            if ! aliyun cr GetRepository --RepoName="$repo" --RepoNamespace="$NAMESPACE" > /dev/null 2>&1; then
              log "INFO" "创建阿里云仓库: $repo"
              if aliyun cr CreateRepository \
                --RepoName="$repo" \
                --RepoNamespace="$NAMESPACE" \
                --RepoType=PUBLIC \
                --Summary="Mirror of $image_name" > /dev/null 2>&1; then
                log "INFO" "仓库创建成功: $repo"
              else
                log "ERROR" "仓库创建失败: $repo"
                return 1
              fi
            else
              log "INFO" "仓库已存在: $repo"
            fi
          }
          
          # 重试函数
          retry_command() {
            local max_attempts="$1"
            local delay="$2"
            local description="$3"
            shift 3
            local command=("$@")
            
            local attempt=1
            while [[ $attempt -le $max_attempts ]]; do
              log "INFO" "$description (尝试 $attempt/$max_attempts)"
              
              if "${command[@]}"; then
                log "INFO" "$description 成功"
                return 0
              else
                local exit_code=$?
                if [[ $attempt -lt $max_attempts ]]; then
                  log "WARN" "$description 失败，${delay}秒后重试..."
                  sleep "$delay"
                else
                  log "ERROR" "$description 在 $max_attempts 次尝试后失败"
                  return $exit_code
                fi
              fi
              
              ((attempt++))
            done
          }
          
          # 执行同步步骤
          sync_status="SUCCESS"
          error_message=""
          
          # 步骤1: 确保仓库存在
          report_progress "仓库检查" "🏗️" "检查/创建阿里云仓库"
          if ! ensure_aliyun_repo "$repo_name"; then
            sync_status="FAILED"
            error_message="仓库创建失败"
          fi
          
          # 步骤2: 拉取源镜像
          if [[ "$sync_status" == "SUCCESS" ]]; then
            report_progress "拉取镜像" "⬇️" "从Docker Hub拉取 $SOURCE_IMAGE"
            if ! retry_command "$MAX_RETRIES" "$RETRY_DELAY" "拉取源镜像" docker pull "$SOURCE_IMAGE"; then
              sync_status="FAILED"
              error_message="拉取源镜像失败"
            else
              # 获取镜像信息
              image_size=$(docker image inspect "$SOURCE_IMAGE" --format '{{.Size}}' | numfmt --to=iec 2>/dev/null || echo "未知")
              image_id=$(docker image inspect "$SOURCE_IMAGE" --format '{{.Id}}' | cut -d':' -f2 | cut -c1-12 2>/dev/null || echo "未知")
              log "INFO" "镜像信息 - ID: $image_id, 大小: $image_size"
            fi
          fi
          
          # 步骤3: 打标签
          if [[ "$sync_status" == "SUCCESS" ]]; then
            report_progress "打标签" "🏷️" "为镜像打标签 $TARGET_IMAGE"
            if ! docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"; then
              sync_status="FAILED"
              error_message="镜像打标签失败"
            fi
          fi
          
          # 步骤4: 推送镜像
          if [[ "$sync_status" == "SUCCESS" ]]; then
            report_progress "推送镜像" "⬆️" "推送到阿里云 $TARGET_IMAGE"
            if ! retry_command "$MAX_RETRIES" "$RETRY_DELAY" "推送目标镜像" docker push "$TARGET_IMAGE"; then
              sync_status="FAILED"
              error_message="推送目标镜像失败"
            fi
          fi
          
          # 步骤5: 清理本地镜像
          if [[ "$sync_status" == "SUCCESS" && "$CLEANUP_ON_SUCCESS" == "true" ]]; then
            report_progress "清理" "🧹" "清理本地镜像标签"
            docker rmi "$TARGET_IMAGE" &> /dev/null || true
            log "INFO" "本地镜像标签已清理"
          fi
          
          # 记录结果
          if [[ "$sync_status" == "SUCCESS" ]]; then
            touch "$done_marker"
            log "INFO" "镜像同步成功: $SOURCE_IMAGE -> $TARGET_IMAGE"
            report_progress "完成" "✅" "镜像 $SOURCE_IMAGE 同步成功"
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=同步成功" >> $GITHUB_OUTPUT
            echo "target_image=$TARGET_IMAGE" >> $GITHUB_OUTPUT
          else
            log "ERROR" "镜像同步失败: $SOURCE_IMAGE - $error_message"
            report_progress "失败" "❌" "镜像 $SOURCE_IMAGE 同步失败: $error_message"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "message=$error_message" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sync-logs-${{ matrix.image }}
          path: logs/
          retention-days: 7

  # 后处理作业
  post-process:
    needs: [pre-check, sync-images]
    if: always() && needs.pre-check.outputs.config-valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all logs
        uses: actions/download-artifact@v4
        with:
          path: all-logs/
          pattern: sync-logs-*

      - name: Generate sync report
        run: |
          echo "📊 生成同步报告..."
          
          # 创建报告文件
          report_file="sync_report_$(date +%Y%m%d_%H%M%S).md"
          
          cat > "$report_file" << EOF
          # Docker镜像同步报告
          
          **同步时间**: $(date '+%Y-%m-%d %H:%M:%S')
          **触发方式**: ${{ github.event_name }}
          **运行ID**: ${{ github.run_id }}
          **提交**: ${{ github.sha }}
          
          ## 同步结果
          
          | 镜像 | 状态 | 目标镜像 | 备注 |
          |------|------|----------|------|
          EOF
          
          # 这里可以添加更多报告生成逻辑
          # 分析日志文件，统计成功/失败数量等
          
          echo "📄 报告已生成: $report_file"

      - name: Update image mapping
        run: |
          echo "🗺️ 更新镜像映射表..."
          
          # 初始化映射文件
          if [[ ! -f "image_list.md" ]]; then
            cat > "image_list.md" << EOF
          # Docker Image Mapping
          
          | DockerHub Image | Aliyun Mirror | 同步时间 | 状态 |
          |-----------------|---------------|----------|------|
          EOF
          fi
          
          # 这里可以添加更新映射表的逻辑
          # 基于同步结果更新映射关系
          
          echo "✅ 映射表更新完成"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 添加变更
          git add done/ image_list.md sync_report_*.md || true
          
          # 提交变更
          if git diff --staged --quiet; then
            echo "📝 没有变更需要提交"
          else
            git commit -m "🤖 自动更新: 镜像同步结果 ($(date '+%Y-%m-%d %H:%M:%S'))"
            git push
            echo "✅ 变更已提交并推送"
          fi

      - name: Create summary
        run: |
          echo "📋 创建工作流摘要..."
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🐳 Docker镜像同步完成
          
          ## 📊 统计信息
          - **处理镜像数量**: ${{ needs.pre-check.outputs.images-count }}
          - **同步时间**: $(date '+%Y-%m-%d %H:%M:%S')
          - **运行模式**: ${{ github.event.inputs.dry_run == 'true' && '🧪 干运行' || '🚀 实际同步' }}
          
          ## 🔗 相关链接
          - [查看详细日志](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [镜像映射表](./image_list.md)
          
          ## 📝 使用说明
          
          ### 手动触发同步
          \`\`\`bash
          # 使用增强版脚本
          ./transfer_enhanced.sh -s nginx:latest -d registry.cn-hangzhou.aliyuncs.com/namespace/nginx:latest -v
          
          # 干运行模式
          ./transfer_enhanced.sh -s redis:alpine -d registry.cn-hangzhou.aliyuncs.com/namespace/redis:alpine --dry-run
          \`\`\`
          
          ### 批量同步
          1. 编辑 \`upload/images.md\` 文件
          2. 提交更改自动触发同步
          3. 或使用工作流手动触发
          
          ---
          *此报告由 GitHub Actions 自动生成*
          EOF
          
          echo "✅ 工作流摘要已创建"