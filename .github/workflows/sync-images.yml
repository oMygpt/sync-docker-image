name: Process and Push Docker Images

on:
  push:
    paths:
      - 'upload/images.md'

jobs:
  process-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 使用直接的 docker login 命令替代 login-action
      - name: Login to DockerHub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        
      - name: Login to Aliyun Container Registry
        run: |
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login "${{ secrets.ALIYUN_REGISTRY }}" -u "${{ secrets.ALIYUN_USERNAME }}" --password-stdin

      - name: Create temp directory
        run: mkdir -p temp done

      - name: Process new images
        run: |
          # 添加调试信息
          echo "Docker info:"
          docker info
          
          echo "Docker version:"
          docker version
          
          # 验证 DockerHub 登录状态
          echo "Checking Docker login status:"
          docker system info | grep Registry
          
          # 创建或清空临时映射文件
          echo "# Docker Image Mapping" > temp/image_mapping.md
          echo "| DockerHub Image | Aliyun Mirror |" >> temp/image_mapping.md
          echo "|-----------------|---------------|" >> temp/image_mapping.md
          
          # 如果存在现有的映射文件，先保存已有的映射关系
          if [ -f "image_list.md" ]; then
            tail -n +4 "image_list.md" > temp/existing_mappings.txt || true
          fi

          # 处理每个新镜像
          while IFS= read -r image || [[ -n "$image" ]]; do
            # 跳过空行和注释
            [[ -z "$image" || "${image:0:1}" == "#" ]] && continue
            
            # 清理行尾空格和回车符
            image=$(echo "$image" | tr -d '\r' | xargs)
            
            echo "Attempting to process image: $image"
            
            # 检查是否已经处理过这个镜像
            if [ ! -f "done/${image// /_}.txt" ]; then
              echo "Starting to process: $image"
              
              # 添加详细的调试信息
              echo "Pulling image $image..."
              if ! docker pull $image; then
                echo "Error pulling image: $image"
                docker pull $image 2>&1
                continue
              fi

              # 构造阿里云镜像地址
              aliyun_image="${{ secrets.ALIYUN_REGISTRY }}/${image#*/}"
              echo "Tagging as: $aliyun_image"
              
              if ! docker tag $image $aliyun_image; then
                echo "Error tagging image"
                continue
              fi

              echo "Pushing to Aliyun..."
              if ! docker push $aliyun_image; then
                echo "Error pushing image"
                continue
              fi

              # 添加到映射文件
              echo "| \`$image\` | \`$aliyun_image\` |" >> temp/image_mapping.md
              
              # 创建完成标记
              touch "done/${image// /_}.txt"
              echo "Successfully processed and pushed: $image"
            else
              echo "Image already processed: $image"
            fi
          done < upload/images.md

          # 合并现有映射和新映射
          if [ -f "temp/existing_mappings.txt" ]; then
            cat temp/existing_mappings.txt >> temp/image_mapping.md
          fi

          # 对映射表进行排序（排除前三行标题）
          (head -n 3 temp/image_mapping.md && tail -n +4 temp/image_mapping.md | sort -u) > image_list.md

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add done/ image_list.md
          git commit -m "Update image list and add processed markers" -a || echo "No changes to commit"
          git push
