name: Process and Push Docker Images

on:
  push:
    paths:
      - 'upload/images.md'

jobs:
  process-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 设置 Docker 认证环境
      - name: Setup Docker authentication
        run: |
          # 创建 Docker 配置目录
          mkdir -p $HOME/.docker
          
          # 生成有效的 JSON 配置
          # 使用 printf 确保不会有意外的换行符
          printf '{
            "auths": {
              "https://index.docker.io/v2/": {
                "auth": "%s"
              }
            }
          }' "$(echo -n "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" | base64)" > $HOME/.docker/config.json
          
          # 验证 JSON 格式
          if ! jq empty $HOME/.docker/config.json; then
            echo "Invalid JSON format in config file"
            exit 1
          fi
          
          # 设置正确的文件权限
          chmod 600 $HOME/.docker/config.json
          
          # 验证配置文件内容（隐藏敏感信息）
          echo "Config file structure:"
          jq 'walk(if type == "string" and length > 8 then "<redacted>" else . end)' $HOME/.docker/config.json

      # 验证 Docker 功能
      - name: Verify Docker setup
        run: |
          echo "Testing Docker version and info..."
          docker version
          docker info
          
          echo "Testing registry connectivity..."
          curl -fsSL https://registry-1.docker.io/v2/ || echo "Basic registry connection failed"

      - name: Process images
        run: |
          # 创建进度跟踪目录
          mkdir -p temp done
          
          echo "=== Starting image processing at $(date) ===" > temp/process.log
          
          # 图像处理函数
          process_docker_image() {
            local image="$1"
            local max_retries=3
            local retry_count=0
            
            echo "Processing image: $image"
            
            while [ $retry_count -lt $max_retries ]; do
              # 尝试拉取镜像
              if docker pull "$image"; then
                local aliyun_image="${{ secrets.ALIYUN_REGISTRY }}/${image#*/}"
                
                echo "Successfully pulled $image, tagging as $aliyun_image"
                
                if docker tag "$image" "$aliyun_image" && \
                   docker push "$aliyun_image"; then
                  echo "Successfully processed $image" >> temp/process.log
                  return 0
                fi
              fi
              
              retry_count=$((retry_count + 1))
              if [ $retry_count -lt $max_retries ]; then
                echo "Retry $retry_count/$max_retries after 5 seconds..."
                sleep 5
              fi
            done
            
            echo "Failed to process $image after $max_retries attempts" >> temp/process.log
            return 1
          }
          
          # 处理镜像列表
          while IFS= read -r line || [[ -n "$line" ]]; do
            # 清理输入行
            image=$(echo "$line" | tr -d '\r' | xargs)
            
            # 跳过空行和注释
            [[ -z "$image" || "${image:0:1}" == "#" ]] && continue
            
            if [ ! -f "done/${image// /_}.txt" ]; then
              echo "=== Processing $image at $(date) ===" >> temp/process.log
              
              if process_docker_image "$image"; then
                touch "done/${image// /_}.txt"
                echo "| \`$image\` | \`${{ secrets.ALIYUN_REGISTRY }}/${image#*/}\` |" >> temp/image_mapping.md
              fi
            else
              echo "Skip already processed image: $image" >> temp/process.log
            fi
          done < upload/images.md
          
          # 显示处理日志
          cat temp/process.log

      - name: Commit changes
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add done/ temp/image_mapping.md || true
          git commit -m "Update processed images list [skip ci]" || echo "No changes to commit"
          git push || echo "No changes to push"
