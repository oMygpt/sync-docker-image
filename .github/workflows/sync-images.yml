name: Process and Push Docker Images

on:
  push:
    paths:
      - 'upload/images.md'

jobs:
  process-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 准备 Docker 配置目录
      - name: Prepare Docker config directory
        run: |
          mkdir -p $HOME/.docker
          echo '{"experimental": "enabled"}' > $HOME/.docker/config.json

      # 配置 Docker 认证
      - name: Configure Docker authentication
        run: |
          # 创建认证配置
          echo '{
            "auths": {
              "https://index.docker.io/v1/": {
                "auth": "${{ secrets.DOCKERHUB_AUTH }}"
              }
            }
          }' > $HOME/.docker/config.json
          
          # 设置适当的权限
          chmod 600 $HOME/.docker/config.json

      # 验证 Docker 配置
      - name: Verify Docker configuration
        run: |
          echo "Checking Docker configuration:"
          ls -la $HOME/.docker/
          echo "Testing Docker connectivity:"
          docker info

      - name: Login to Aliyun Container Registry
        run: |
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login "${{ secrets.ALIYUN_REGISTRY }}" -u "${{ secrets.ALIYUN_USERNAME }}" --password-stdin

      # 其余的处理步骤保持不变...
      - name: Process new images
        run: |
          # 创建必要的目录
          mkdir -p temp done
          
          # 设置处理状态文件
          echo "Processing started at $(date)" > temp/process.log
          
          while IFS= read -r image || [[ -n "$image" ]]; do
            # 记录处理开始
            echo "Starting to process: $image" >> temp/process.log
            
            [[ -z "$image" || "${image:0:1}" == "#" ]] && continue
            image=$(echo "$image" | tr -d '\r' | xargs)
            
            if [ ! -f "done/${image// /_}.txt" ]; then
              echo "Attempting to pull: $image" >> temp/process.log
              
              # 添加重试机制
              max_attempts=3
              attempt=1
              while [ $attempt -le $max_attempts ]; do
                echo "Pull attempt $attempt of $max_attempts" >> temp/process.log
                if docker pull $image; then
                  echo "Pull successful on attempt $attempt" >> temp/process.log
                  break
                fi
                attempt=$((attempt + 1))
                if [ $attempt -le $max_attempts ]; then
                  echo "Waiting before retry..." >> temp/process.log
                  sleep 10
                fi
              done
              
              if [ $attempt -gt $max_attempts ]; then
                echo "Failed to pull $image after $max_attempts attempts" >> temp/process.log
                continue
              fi

              aliyun_image="${{ secrets.ALIYUN_REGISTRY }}/${image#*/}"
              echo "Tagging as: $aliyun_image" >> temp/process.log
              
              docker tag $image $aliyun_image
              docker push $aliyun_image
              
              touch "done/${image// /_}.txt"
              echo "Successfully processed: $image" >> temp/process.log
            fi
          done < upload/images.md
          
          # 输出处理日志用于调试
          cat temp/process.log
