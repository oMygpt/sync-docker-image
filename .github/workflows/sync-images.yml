name: Process and Push Docker Images

on:
  push:
    paths:
      - 'upload/images.md'

jobs:
  process-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 安装阿里云CLI工具
      - name: Install Aliyun CLI
        run: |
          curl -sSL https://github.com/aliyun/aliyun-cli/releases/download/v3.0.188/aliyun-cli-linux-3.0.188-amd64.tgz | tar -xz
          sudo mv aliyun /usr/local/bin/
          aliyun --version

      # 配置阿里云认证信息
      - name: Configure Aliyun CLI
        run: |
          aliyun configure set \
            --mode AK \
            --region ${{ secrets.ALIYUN_REGION }} \
            --access-key-id ${{ secrets.ALIYUN_ACCESS_KEY_ID }} \
            --access-key-secret ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}

      # 统一的 Docker 登录步骤
      - name: Docker Registry Authentication
        run: |
          # 登录到 DockerHub
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          
          # 验证 DockerHub 登录状态
          if ! docker info | grep -q "Username: ${{ secrets.DOCKERHUB_USERNAME }}"; then
            echo "DockerHub authentication failed"
            exit 1
          fi
          
          # 登录到阿里云容器服务
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login "${{ secrets.ALIYUN_REGISTRY }}" -u "${{ secrets.ALIYUN_USERNAME }}" --password-stdin
          
          # 验证阿里云登录状态
          if ! docker info | grep -q "${{ secrets.ALIYUN_REGISTRY }}"; then
            echo "Aliyun authentication failed"
            exit 1
          fi

      - name: Process images and create mapping
        run: |
          mkdir -p temp done
          
          # 初始化映射文件
          if [ ! -f "image_list.md" ]; then
            echo "# Docker Image Mapping" > image_list.md
            echo "| DockerHub Image | Aliyun Mirror |" >> image_list.md
            echo "|-----------------|---------------|" >> image_list.md
          fi
          
          # 创建临时映射文件
          cp image_list.md temp/new_mapping.md
          
          # 处理镜像的函数
          process_docker_image() {
            local image="$1"
            local namespace="${{ secrets.ALIYUN_NAMESPACE }}"
            local max_retries=3
            local retry_count=0
            
            # 解析镜像名称和标签
            local image_name=$(echo $image | cut -d':' -f1)
            local image_tag=$(echo $image | grep ':' > /dev/null && echo $image | cut -d':' -f2 || echo "latest")
            local repo_name=$(echo $image_name | rev | cut -d'/' -f1 | rev)
            
            # 构造阿里云镜像完整路径
            local aliyun_image="${{ secrets.ALIYUN_REGISTRY }}/${namespace}/${repo_name}:${image_tag}"
            
            echo "Processing image: $image -> $aliyun_image"
            
            # 确保阿里云仓库存在
            ensure_aliyun_repo() {
              local repo_name="$1"
              
              # 检查仓库是否存在
              if ! aliyun cr GetRepository \
                --RepoName=${repo_name} \
                --RepoNamespace=${namespace} > /dev/null 2>&1; then
                
                echo "Creating repository ${repo_name} in namespace ${namespace}"
                aliyun cr CreateRepository \
                  --RepoName=${repo_name} \
                  --RepoNamespace=${namespace} \
                  --RepoType=PUBLIC \
                  --Summary="Mirror of ${image_name}"
              fi
            }
            
            # 确保仓库存在
            ensure_aliyun_repo "$repo_name"
            
            # 添加验证登录状态的检查
            echo "Verifying Docker login status before processing..."
            if ! docker info | grep -q "Username: ${{ secrets.DOCKERHUB_USERNAME }}"; then
              echo "DockerHub authentication lost, attempting to re-authenticate..."
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            fi
            
            while [ $retry_count -lt $max_retries ]; do
              echo "Attempt $((retry_count + 1)) of $max_retries"
              
              if docker pull "$image"; then
                echo "Successfully pulled $image"
                
                if docker tag "$image" "$aliyun_image" && \
                   docker push "$aliyun_image"; then
                   
                  # 添加到映射文件
                  echo "| \`$image\` | \`$aliyun_image\` |" >> temp/new_mapping.md
                  
                  # 标记为已处理
                  touch "done/${image// /_}.txt"
                  echo "Successfully processed $image"
                  return 0
                fi
              fi
              
              retry_count=$((retry_count + 1))
              [ $retry_count -lt $max_retries ] && sleep 5
            done
            
            echo "Failed to process $image after $max_retries attempts"
            return 1
          }
          
          # 处理镜像列表
          while IFS= read -r line || [[ -n "$line" ]]; do
            image=$(echo "$line" | tr -d '\r' | xargs)
            [[ -z "$image" || "${image:0:1}" == "#" ]] && continue
            
            if [ ! -f "done/${image// /_}.txt" ]; then
              process_docker_image "$image"
            fi
          done < upload/images.md
          
          # 对映射表进行排序（保留头部3行）
          (head -n 3 temp/new_mapping.md; tail -n +4 temp/new_mapping.md | sort -u) > image_list.md
          
          echo "Final mapping file content:"
          cat image_list.md

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add done/ image_list.md
          git commit -m "Update image mappings and processed markers" || echo "No changes to commit"
          git push || echo "No changes to push"
